{
	"info": {
		"_postman_id": "c38aaeed-8691-407b-b1b0-4cecd39bbbfe",
		"name": "New Collection1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Folder1",
			"item": [
				{
					"name": "Get user data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Get only the perticular value from data\r",
									"let JsonData=pm.response.json()\r",
									"let datavalue;\r",
									"\r",
									"for(let sData of JsonData.data){\r",
									"   if(sData.id==\"10\"){\r",
									"    console.log(sData);\r",
									"    console.log(typeof sData);\r",
									"    datavalue=sData;\r",
									"}       \r",
									"}\r",
									"console.log(typeof datavalue) // data is an array\r",
									"\r",
									"pm.test(\"Check the User data\", function()\r",
									"{\r",
									"    pm.expect(datavalue.first_name).to.eql(\"Byron\");\r",
									"})\r",
									"//postman.setNextRequest(\"Nested Object\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/api/users?page=2",
							"host": [
								"{{Url}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						},
						"description": "Get the user details by comparing the ID from the array list."
					},
					"response": []
				},
				{
					"name": "Compare Multiple functions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New Test\", function()\r",
									"{\r",
									"let a={\r",
									"    \"Name\": \"Apple\",\r",
									"    \"Class\":\"1\"\r",
									"};\r",
									"let b={\r",
									"    \"Name\":\"Apple\",\r",
									"    \"Class\":\"5\"\r",
									"};\r",
									"\r",
									"pm.expect(a).to.not.eql(b, '1');\r",
									"//pm.expect(a).to.equal(b,'1');\r",
									"pm.expect(true).to.be.true;\r",
									"pm.expect([]).to.be.empty;\r",
									"})\r",
									"//postman.setNextRequest(null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						},
						"description": "Create 2 functions and compare the values."
					},
					"response": []
				},
				{
					"name": "Nested Object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Get only the perticular value from data\r",
									"let JsonData=pm.response.json()\r",
									"let datavalue;\r",
									"\r",
									"for(let sData of JsonData.data){\r",
									"   console.log(sData);\r",
									"   if(sData.hasOwnProperty('email')){\r",
									"      datavalue=sData.last_name;\r",
									"      console.log(datavalue);\r",
									"   }\r",
									"   \r",
									"   if(sData.first_name==\"Byron\"){\r",
									"    console.log(typeof JsonData.data);\r",
									"    datavalue=sData;\r",
									"}\r",
									"}\r",
									"//postman.setNextRequest(\"Compare Multiple functions\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reusing Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var commontests=()=>{\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 900ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"}\r",
							"\r",
							"pm.environment.set(\"CommonTest\", commontests.toString());\r",
							"\r",
							"eval(pm.environment.get(\"CommonTest\"))();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "example.com",
					"host": [
						"example",
						"com"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const options = {\r",
							"  'method': 'GET',\r",
							"  'url': 'https://httpbin.org/uuid',\r",
							"  'headers': {\r",
							"    'Foo': 'Hello'\r",
							"  }\r",
							"};\r",
							"\r",
							"pm.sendRequest(options, function (err, response) {\r",
							"    var data=response.json();\r",
							"    pm.globals.set(\"Localuuid\",data.uuid );\r",
							"    console.log(\"Response is here\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\":\"josh\",\r\n    \"id\":\"{{Localuuid}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://httpbin.org/post",
					"protocol": "https",
					"host": [
						"httpbin",
						"org"
					],
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Functions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function add(a,b)\r",
							"{\r",
							"    console.log(a+b);\r",
							"    return a+b;\r",
							"    \r",
							"}\r",
							"add(4,5);\r",
							"\r",
							"var myMessage= function(b){\r",
							"    console.log(\"Hii\");\r",
							"    return b;\r",
							"}\r",
							"\r",
							"console.log(myMessage(40));\r",
							"console.log(add(40, 50));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://httpbin.org/",
					"protocol": "https",
					"host": [
						"httpbin",
						"org"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var names=[\"abb\", \"cdd\", \"eff\", \"ghh\"];\r",
							"\r",
							"\r",
							"var mixedarray=[2,'a', undefined, [3,5,6],function() {}];\r",
							"console.log(mixedarray[3][2]);\r",
							"\r",
							"names.push(\"Hiiiio\");\r",
							"names.shift();\r",
							"names.shift();\r",
							"console.log(names.concat(mixedarray));\r",
							" var arr=[];\r",
							" console.log(arr);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://httpbin.org/",
					"protocol": "https",
					"host": [
						"httpbin",
						"org"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Objects",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var person={\r",
							"    \"name\": \"Josh\",\r",
							"    \"email\":\"Josh@123\",\r",
							"    \"age\": 4\r",
							"};\r",
							"console.log(person.email);\r",
							"\r",
							"var Student=[\r",
							"    {\r",
							"    \"name\": \"Josh\",\r",
							"    \"email\":\"Josh@123\",\r",
							"    \"age\": 4\r",
							"},\r",
							"{\r",
							"    \"name\": \"Kru\",\r",
							"    \"email\":\"Kru@123\",\r",
							"    \"age\": 5\r",
							"}\r",
							"]\r",
							"console.log(Student);\r",
							"console.log(Student[1].name);\r",
							"//Student[0].age=9;\r",
							"\r",
							"\r",
							"Student[1].permission=[\"Yes\",\"No\"];\r",
							"console.log(Student);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://httpbin.org/",
					"protocol": "https",
					"host": [
						"httpbin",
						"org"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Variables",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const a=5;\r",
							"//a=9;\r",
							"console.log(a);\r",
							"\r",
							"const Person={};\r",
							"\r",
							"Person.name=\"J\";\r",
							"console.log(Person);\r",
							"\r",
							"const message=`Hello my name is ${Person.name}`;\r",
							"console.log(message);\r",
							"\r",
							"const AplusB=(a,b)=>a+b;\r",
							"console.log(AplusB(4,8));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://httpbin.org/",
					"protocol": "https",
					"host": [
						"httpbin",
						"org"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		}
	]
}